{"ast":null,"code":"var _jsxFileName = \"D:\\\\ups\\\\src\\\\pages\\\\Fetch\\\\fetch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from '../Nav';\nimport './fetch.css';\nimport { Link } from \"react-router-dom\";\n\n// Define a separate component for the content you want to refresh\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Content({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(\"body\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_c = Content;\nfunction Fetch() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://172.22.81.230:8080/rfid/getall\");\n        const actualData = await response.json();\n        setData(actualData);\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n\n    // Fetch data initially\n    fetchData();\n\n    // Refresh the data every 30 seconds (adjust as needed)\n    const refreshInterval = setInterval(() => {\n      fetchData();\n    }, 1000); // 30 seconds\n\n    return () => {\n      // Clear the interval when the component unmounts\n      clearInterval(refreshInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Content, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Fetch, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c2 = Fetch;\nexport default Fetch;\nvar _c, _c2;\n$RefreshReg$(_c, \"Content\");\n$RefreshReg$(_c2, \"Fetch\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","Link","jsxDEV","_jsxDEV","Content","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","Fetch","_s","setData","fetchData","response","fetch","actualData","json","err","console","log","message","refreshInterval","setInterval","clearInterval","children","_c2","$RefreshReg$"],"sources":["D:/ups/src/pages/Fetch/fetch.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Navbar from '../Nav'\r\nimport './fetch.css'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Define a separate component for the content you want to refresh\r\nfunction Content({ data }) {\r\n  return (\r\n    <body></body>\r\n  );\r\n}\r\n\r\nfunction Fetch() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://172.22.81.230:8080/rfid/getall\");\r\n        const actualData = await response.json();\r\n        setData(actualData);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    };\r\n\r\n    // Fetch data initially\r\n    fetchData();\r\n\r\n    // Refresh the data every 30 seconds (adjust as needed)\r\n    const refreshInterval = setInterval(() => {\r\n      fetchData();\r\n    }, 1000); // 30 seconds\r\n\r\n    return () => {\r\n      // Clear the interval when the component unmounts\r\n      clearInterval(refreshInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar /> {/* Navbar outside of the refreshing part */}\r\n      <Content data={data} /> {/* Content part that will be refreshed */}\r\n       {/* Footer outside of the refreshing part */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fetch;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,aAAa;AACpB,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,OAAOA,CAAC;EAAEC;AAAK,CAAC,EAAE;EACzB,oBACEF,OAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAY,CAAC;AAEjB;AAACC,EAAA,GAJQN,OAAO;AAMhB,SAASO,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACP,IAAI,EAAEQ,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;QACrE,MAAMC,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACxCL,OAAO,CAACI,UAAU,CAAC;MACrB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;MAC1B;IACF,CAAC;;IAED;IACAR,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMS,eAAe,GAAGC,WAAW,CAAC,MAAM;MACxCV,SAAS,CAAC,CAAC;IACb,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAM;MACX;MACAW,aAAa,CAACF,eAAe,CAAC;IAChC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA,CAACH,MAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eACXN,OAAA,CAACC,OAAO;MAACC,IAAI,EAAEA;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAErB,CAAC;AAEV;AAACG,EAAA,CAnCQD,KAAK;AAAAgB,GAAA,GAALhB,KAAK;AAqCd,eAAeA,KAAK;AAAC,IAAAD,EAAA,EAAAiB,GAAA;AAAAC,YAAA,CAAAlB,EAAA;AAAAkB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}