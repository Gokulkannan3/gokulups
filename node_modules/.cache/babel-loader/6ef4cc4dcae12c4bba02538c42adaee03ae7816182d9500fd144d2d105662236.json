{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet-routing-machine\";\nimport \"leaflet-routing-machine/dist/leaflet-routing-machine.css\";\nimport { useMap } from \"react-leaflet\";\nimport truckIcon from \"./icons/truck.png\";\nconst Leafroute = ({\n  awb\n}) => {\n  _s();\n  const map = useMap();\n  const [marker, setMarker] = useState(null);\n  let truckIconOptions = {\n    iconUrl: truckIcon,\n    iconSize: [40, 40]\n  };\n  useEffect(() => {\n    const updateMarkerLocation = () => {\n      fetch(`http://172.22.81.182:8080/rfid/getloc/${awbNum}`).then(response => response.json()).then(locationData => {\n        const {\n          latitude,\n          longitude\n        } = locationData; // Adjust property names based on your API response\n        const newLatLng = L.latLng(latitude, longitude);\n        if (marker) {\n          marker.setLatLng(newLatLng);\n        } else {\n          setMarker(L.marker(newLatLng, {\n            icon: L.icon(truckIconOptions)\n          }).addTo(map));\n        }\n        map.setView(newLatLng, map.getZoom()); // Center the map on the marker's new location\n      }).catch(error => {\n        console.error(\"Error fetching location data:\", error);\n      });\n    };\n\n    // Initial update of the marker location\n    updateMarkerLocation();\n\n    // Periodically update the marker location (every 5 seconds)\n    const intervalId = setInterval(updateMarkerLocation, 5000);\n\n    // Cleanup the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [awb, map, marker, truckIconOptions]);\n  return null;\n};\n_s(Leafroute, \"82RRR4IO+uCwfw1DbEfiuO+4kds=\", false, function () {\n  return [useMap];\n});\n_c = Leafroute;\nexport default Leafroute;\nvar _c;\n$RefreshReg$(_c, \"Leafroute\");","map":{"version":3,"names":["useEffect","useState","L","useMap","truckIcon","Leafroute","awb","_s","map","marker","setMarker","truckIconOptions","iconUrl","iconSize","updateMarkerLocation","fetch","awbNum","then","response","json","locationData","latitude","longitude","newLatLng","latLng","setLatLng","icon","addTo","setView","getZoom","catch","error","console","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["D:/ups/src/pages/lea/leafroute.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet-routing-machine\";\r\nimport \"leaflet-routing-machine/dist/leaflet-routing-machine.css\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport truckIcon from \"./icons/truck.png\";\r\n\r\nconst Leafroute = ({ awb }) => {\r\n  const map = useMap();\r\n  const [marker, setMarker] = useState(null);\r\n\r\n  let truckIconOptions = {\r\n    iconUrl: truckIcon,\r\n    iconSize: [40, 40],\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    const updateMarkerLocation = () => {\r\n      fetch(`http://172.22.81.182:8080/rfid/getloc/${awbNum}`)\r\n        .then((response) => response.json())\r\n        .then((locationData) => {\r\n          const { latitude, longitude } = locationData; // Adjust property names based on your API response\r\n          const newLatLng = L.latLng(latitude, longitude);\r\n\r\n          if (marker) {\r\n            marker.setLatLng(newLatLng);\r\n          } else {\r\n            setMarker(L.marker(newLatLng, { icon: L.icon(truckIconOptions) }).addTo(map));\r\n          }\r\n\r\n          map.setView(newLatLng, map.getZoom()); // Center the map on the marker's new location\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching location data:\", error);\r\n        });\r\n    };\r\n\r\n    // Initial update of the marker location\r\n    updateMarkerLocation();\r\n\r\n    // Periodically update the marker location (every 5 seconds)\r\n    const intervalId = setInterval(updateMarkerLocation, 5000);\r\n\r\n    // Cleanup the interval when the component unmounts\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [awb, map, marker, truckIconOptions]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default Leafroute;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,yBAAyB;AAChC,OAAO,0DAA0D;AACjE,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,SAAS,MAAM,mBAAmB;AAEzC,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,GAAG,GAAGL,MAAM,CAAC,CAAC;EACpB,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE1C,IAAIU,gBAAgB,GAAG;IACrBC,OAAO,EAAER,SAAS;IAClBS,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC;EAEDb,SAAS,CAAC,MAAM;IAEd,MAAMc,oBAAoB,GAAGA,CAAA,KAAM;MACjCC,KAAK,CAAE,yCAAwCC,MAAO,EAAC,CAAC,CACrDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,YAAY,IAAK;QACtB,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,YAAY,CAAC,CAAC;QAC9C,MAAMG,SAAS,GAAGrB,CAAC,CAACsB,MAAM,CAACH,QAAQ,EAAEC,SAAS,CAAC;QAE/C,IAAIb,MAAM,EAAE;UACVA,MAAM,CAACgB,SAAS,CAACF,SAAS,CAAC;QAC7B,CAAC,MAAM;UACLb,SAAS,CAACR,CAAC,CAACO,MAAM,CAACc,SAAS,EAAE;YAAEG,IAAI,EAAExB,CAAC,CAACwB,IAAI,CAACf,gBAAgB;UAAE,CAAC,CAAC,CAACgB,KAAK,CAACnB,GAAG,CAAC,CAAC;QAC/E;QAEAA,GAAG,CAACoB,OAAO,CAACL,SAAS,EAAEf,GAAG,CAACqB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MACzC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD,CAAC,CAAC;IACN,CAAC;;IAED;IACAjB,oBAAoB,CAAC,CAAC;;IAEtB;IACA,MAAMmB,UAAU,GAAGC,WAAW,CAACpB,oBAAoB,EAAE,IAAI,CAAC;;IAE1D;IACA,OAAO,MAAM;MACXqB,aAAa,CAACF,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAAC3B,GAAG,EAAEE,GAAG,EAAEC,MAAM,EAAEE,gBAAgB,CAAC,CAAC;EAExC,OAAO,IAAI;AACb,CAAC;AAACJ,EAAA,CA5CIF,SAAS;EAAA,QACDF,MAAM;AAAA;AAAAiC,EAAA,GADd/B,SAAS;AA8Cf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}